#!/usr/bin/env python

from client.profclient import ProfClient
from subprocess import call
from glob import glob
import socket, os, sys
import subprocess
import argparse
import logging
import json

parser = argparse.ArgumentParser(description='Profiling server')
parser.add_argument('--bind', help='Server IP address binder, default is localhost')
parser.add_argument('--port', help='Server port number, default is 10000') 
parser.add_argument('--jobid', help='Redis-DB port number')
args = parser.parse_args()

class CustomClient(ProfClient):
    def __init__(self, bindaddr, port, jobID):
        super(CustomClient, self).__init__(bindaddr, port)
        self.bindaddr = bindaddr 
        self.port = port
        self.jobID = jobID
    
    """
    Implement run_on_job(self) method for idendified behavior.
    Use send_data(sock, cmdlist) to send data to server
    return value: command list
    command format: key, value
    
    NOTICE: msg['command'] = XXX must be added to msg dict() object
            Farthermore, XXX must be idendified in server side
    """
    def run_on_job(self, sock):
        origindir = os.getcwd()
        eventlist = ['cache-misses:u', 'branch-misses:u', 'cpu-cycles:u']
        program = "/home/chihmin/llvm-develop/llvm/build/bin/clang++"

        f = open("/home/chihmin/llvm-develop/llvm/build/clang++.log", "r")
        while True:
            str = f.readline()
            if not str:
                break
            
            cmd = str.split()
            targetdir = cmd[1]
            args = " ".join(['-O3'] + cmd[3:])

            os.chdir(targetdir)
            self.run_profiling(sock, program, eventlist, args) 
            os.chdir(origindir)
             
        f.close()
    
    def run_profiling(self, sock, program, eventlist, args):
        reportname = "profiling-result.log"
        events = ",".join(eventlist)
        recordcmd = ("perf record -e %s %s %s" % (events, program, args)).split()
        reportcmd = ("perf script").split()
        
        returncode = call(recordcmd, stdout=open(os.devnull, "w"), stderr=subprocess.STDOUT)
        if returncode != 0:
            logging.error("Execute Perf Error, please check if it's used SUDO or not")
            sys.exit(-1)

        with open(reportname, "w") as f:
            call(reportcmd, stdout=f)
        self.parse_prof_report(sock, reportname)
        
        for filename in glob("perf.*"):
            os.remove(filename)

    def parse_prof_report(self, sock, reportname):
        cmdlist = list()
        f = open(reportname, 'r')
        while True:
            str = f.readline()
            if not str:
                break
            
            msg = dict()
            msg['command'] = self.SEND_PERF_DATA
            msg['message'] = str
            msg['port'] = self.jobID
            cmdlist.append(msg) 
        
        f.close()
        self.send_data(sock, cmdlist)
        logging.info("End of file ...")


def main():
    portnumber = 10000
    bindaddr = 'localhost'
     
    if args.bind is not None:
        bindaddr = args.bind

    if args.port is not None:
        portnumber = int(args.port)
    
    if args.jobid is None:
        print("Please select job ID ...")
        sys.exit(1)

    profclient = CustomClient(bindaddr, portnumber, int(args.jobid))
    profclient.run()    

if __name__ == "__main__":
    main()
