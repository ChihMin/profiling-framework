#!/usr/bin/env python

from multiprocessing import Process
from subprocess import call
import socket
import time
import os, sys
import subprocess
import redis
import signal
import argparse

MAIN_PORT = 2000

def create_redis_server(port):
    if not os.path.exists(port):
        os.mkdir(port)
    
    orgin_path = os.getcwd()
    os.chdir(port)
    cmds = ["redis-server", "--port", port]
    ret = call(cmds, stdout=open(os.devnull, "w"), stderr=subprocess.STDOUT) 
    sys.exit(0)

def create_server(port):
    portnumber = str(port)
    p = Process(target=create_redis_server, args=(portnumber,))
    p.start() 
    print("Redis server created, [PID]: %s" % p.pid)
    
    r = redis.Redis(port=portnumber)
    while True:
        try:
            print("Start connecting to port %s ..." % portnumber)
            time.sleep(2)
            r.ping()
        except redis.exceptions.ConnectionError:
            print("Connected to port %s failed, restarting ..." % portnumber)
            pass
        else:
            print("Connected successfully!")
            break  
    return p

def redis_initialize(r):
    portlist = r.keys()
    for port in portlist:
        proc = create_server(port)

def initialize():
    print("Booting redis-DB manager ...")
    create_server(MAIN_PORT)    # Create redis-server manager
    
    redis_manager = redis.Redis(port=MAIN_PORT)
    redis_initialize(redis_manager)          # Initialized profiling DB

def main():
    parser = argparse.ArgumentParser(description='Profiling server')
    parser.add_argument('--bind', help='Server IP address binder, default is localhost')
    parser.add_argument('--port', help='Server port number, default is 10000') 
    args = parser.parse_args()

    portnumber = 10000
    bindaddr = 'localhost'
    
    if args.bind is not None:
        bindaddr = args.bind

    if args.port is not None:
        portnumber = int(args.port)

    initialize()
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error, msg:
        sys.stderr.write("[ERROR] %s\n" % msg[1])
        sys.exit(-1)
    
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((bindaddr, portnumber))
    sock.listen(100)
    
    while True:
        (csock, adr) = sock.accept()
        print "Client Info: " , csock, adr
        msg = csock.recv(1024)
        if not msg:
            pass
        else:
            print "Client send: " + msg
            csock.send("Hello I'm Server.\n")
        csock.close() 

def keyboard_int_handler(signal, frame):
    print("[PID %s] Stop profiling server ..." % os.getpid())
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, keyboard_int_handler)
    main()
        
